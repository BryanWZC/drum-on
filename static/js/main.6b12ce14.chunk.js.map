{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["audioLibrary","Q","W","E","A","S","D","Z","X","C","App","handleClick","event","target","id","audio","document","getElementById","innerHTML","console","log","play","addEventListener","e","keyCode","String","fromCharCode","click","className","onClick","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6NAGMA,G,UAAe,CACnBC,EAAG,CAAC,2DAA2D,YAC/DC,EAAG,CAAC,2DAA2D,YAC/DC,EAAG,CAAC,2DAA2D,YAC/DC,EAAG,CAAC,6DAA6D,YACjEC,EAAG,CAAC,2DAA2D,QAC/DC,EAAG,CAAC,yDAAyD,WAC7DC,EAAG,CAAC,6DAA6D,eACjEC,EAAG,CAAC,6DAA6D,QACjEC,EAAG,CAAC,yDAAyD,eAgEhDC,MA7Df,WAEE,IAAMC,EAAc,SAACC,GACnB,IAAIC,EAASD,EAAMC,OAAOC,GAAG,GACzBC,EAAQC,SAASC,eAAeJ,GACpC,OAAQA,GACN,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACL,IAAK,IACHG,SAASC,eAAe,WAAWC,UAAYlB,EAAaa,GAAQ,GAKxEM,QAAQC,IAAIP,GACZE,EAAMM,QAqBN,OAlBAL,SAASM,iBAAiB,WAAW,SAACC,GACpC,OAAQA,EAAEC,SACR,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACHR,SAASC,eAAeQ,OAAOC,aAAaH,EAAEC,SAAS,KAAKG,YAQhE,yBAAKb,GAAK,WACV,yBAAKA,GAAG,YACN,yBAAKA,GAAK,gBACN,4BAAQc,UAAY,WAAWd,GAAG,KAAKe,QAAUlB,GAAjD,KAAgE,2BAAOmB,IAAK9B,EAAaC,EAAE,GAAI2B,UAAY,OAAOd,GAAG,OACrH,4BAAQc,UAAY,WAAWd,GAAG,KAAKe,QAAUlB,GAAjD,IAA+D,2BAAOmB,IAAK9B,EAAaE,EAAE,GAAI0B,UAAY,OAAOd,GAAG,OACpH,4BAAQc,UAAY,WAAWd,GAAG,KAAKe,QAAUlB,GAAjD,IAA+D,2BAAOmB,IAAK9B,EAAaG,EAAE,GAAIyB,UAAY,OAAOd,GAAG,OACpH,4BAAQc,UAAY,WAAYd,GAAG,KAAKe,QAAUlB,GAAlD,IAAgE,2BAAOmB,IAAK9B,EAAaI,EAAE,GAAIwB,UAAY,OAAOd,GAAG,OACrH,4BAAQc,UAAY,WAAWd,GAAG,KAAKe,QAAUlB,GAAjD,IAA+D,2BAAOmB,IAAK9B,EAAaK,EAAE,GAAIuB,UAAY,OAAOd,GAAG,OACpH,4BAAQc,UAAY,WAAWd,GAAG,KAAKe,QAAUlB,GAAjD,IAA+D,2BAAOmB,IAAK9B,EAAaM,EAAE,GAAIsB,UAAY,OAAOd,GAAG,OACpH,4BAAQc,UAAY,WAAWd,GAAG,KAAKe,QAAUlB,GAAjD,IAA+D,2BAAOmB,IAAK9B,EAAaO,EAAE,GAAIqB,UAAY,OAAOd,GAAG,OACpH,4BAAQc,UAAY,WAAWd,GAAG,KAAKe,QAAUlB,GAAjD,IAA+D,2BAAOmB,IAAK9B,EAAaQ,EAAE,GAAIoB,UAAY,OAAOd,GAAG,OACpH,4BAAQc,UAAY,WAAWd,GAAG,KAAKe,QAAUlB,GAAjD,IAA+D,2BAAOmB,IAAK9B,EAAaS,EAAE,GAAImB,UAAY,OAAOd,GAAG,UCzD5GiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtB,SAASC,eAAe,SDyHpB,kBAAmBsB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.6b12ce14.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst audioLibrary = {\n  Q: ['https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3','Heater-1'],\n  W: ['https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3','Heater-2'],\n  E: ['https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3','Heater-3'],\n  A: ['https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3','Heater-4'],\n  S: ['https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3','Clap'],\n  D: ['https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3','Open-HH'],\n  Z: ['https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\"Kick-n'-Hat\"],\n  X: ['https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3','Kick'],\n  C: ['https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3','Closed-HH'],\n};\n\nfunction App() {\n\n  const handleClick = (event) =>{\n    let target = event.target.id[0];\n    let audio = document.getElementById(target);\n    switch (target){\n      case 'Q':\n      case 'W':\n      case 'E':\n      case 'A':\n      case 'S':\n      case 'D':\n      case 'Z':\n      case 'X':\n      case 'C':\n        document.getElementById('display').innerHTML = audioLibrary[target][1];\n        break;\n      default:\n        break;\n    }\n    console.log(target)\n    audio.play();\n  };\n\n    document.addEventListener('keydown', (e) => {\n      switch (e.keyCode){\n        case 81:\n        case 87:\n        case 69:\n        case 65:\n        case 83:\n        case 68:\n        case 90:\n        case 88:\n        case 67:\n          document.getElementById(String.fromCharCode(e.keyCode)+'1').click();\n          break;\n        default:\n          break;\n      }\n    });\n\n    return (\n      <div id = 'wrapper'>\n      <div id='display'></div>\n        <div id = 'drum-machine'>\n            <button className = 'drum-pad' id='Q1' onClick ={handleClick}>Q <audio src={audioLibrary.Q[0]} className = 'clip' id='Q'></audio></button>\n            <button className = 'drum-pad' id='W1' onClick ={handleClick}>W<audio src={audioLibrary.W[0]} className = 'clip' id='W'></audio></button>\n            <button className = 'drum-pad' id='E1' onClick ={handleClick}>E<audio src={audioLibrary.E[0]} className = 'clip' id='E'></audio></button>\n            <button className = 'drum-pad'  id='A1' onClick ={handleClick}>A<audio src={audioLibrary.A[0]} className = 'clip' id='A'></audio></button>\n            <button className = 'drum-pad' id='S1' onClick ={handleClick}>S<audio src={audioLibrary.S[0]} className = 'clip' id='S'></audio></button>\n            <button className = 'drum-pad' id='D1' onClick ={handleClick}>D<audio src={audioLibrary.D[0]} className = 'clip' id='D'></audio></button>\n            <button className = 'drum-pad' id='Z1' onClick ={handleClick}>Z<audio src={audioLibrary.Z[0]} className = 'clip' id='Z'></audio></button>\n            <button className = 'drum-pad' id='X1' onClick ={handleClick}>X<audio src={audioLibrary.X[0]} className = 'clip' id='X'></audio></button>\n            <button className = 'drum-pad' id='C1' onClick ={handleClick}>C<audio src={audioLibrary.C[0]} className = 'clip' id='C'></audio></button>\n        </div> \n      </div>\n    );\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}